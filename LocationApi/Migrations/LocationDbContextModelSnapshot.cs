// <auto-generated />
using LocationApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocationApi.Migrations
{
    [DbContext(typeof(LocationDbContext))]
    partial class LocationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LocationApi.Domain.AggregateModels.LocationAggregate.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("Owner")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Owner");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Owner"));

                    b.ToTable("Location");
                });

            modelBuilder.Entity("LocationApi.Domain.AggregateModels.RouteAggregate.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OwnerId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("OwnerId"));

                    b.ToTable("Route");
                });

            modelBuilder.Entity("LocationApi.Domain.AggregateModels.RouteAggregate.Segment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Distance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RouteId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RouteId"));

                    b.ToTable("Segment");
                });

            modelBuilder.Entity("LocationApi.Domain.AggregateModels.LocationAggregate.Location", b =>
                {
                    b.OwnsOne("LocationApi.Domain.Address", "Addr", b1 =>
                        {
                            b1.Property<long>("LocationId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("CN")
                                .HasColumnName("Country");

                            b1.Property<string>("DetailAddress")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("DetailAddress");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("District");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Province");

                            b1.HasKey("LocationId");

                            b1.ToTable("Location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Addr")
                        .IsRequired();
                });

            modelBuilder.Entity("LocationApi.Domain.AggregateModels.RouteAggregate.Route", b =>
                {
                    b.OwnsOne("LocationApi.Domain.AggregateModels.LocationAggregate.LocationDescription", "Destination", b1 =>
                        {
                            b1.Property<long>("RouteId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DestinationCity");

                            b1.Property<long>("LocationId")
                                .HasColumnType("bigint")
                                .HasColumnName("DestinationLocationId");

                            b1.Property<string>("LocationName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("DestinationLocationName");

                            b1.HasKey("RouteId");

                            b1.ToTable("Route");

                            b1.WithOwner()
                                .HasForeignKey("RouteId");
                        });

                    b.OwnsOne("LocationApi.Domain.AggregateModels.LocationAggregate.LocationDescription", "Origin", b1 =>
                        {
                            b1.Property<long>("RouteId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("OriginCity");

                            b1.Property<long>("LocationId")
                                .HasColumnType("bigint")
                                .HasColumnName("OriginLocationId");

                            b1.Property<string>("LocationName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("OriginLocationName");

                            b1.HasKey("RouteId");

                            b1.ToTable("Route");

                            b1.WithOwner()
                                .HasForeignKey("RouteId");
                        });

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("Origin")
                        .IsRequired();
                });

            modelBuilder.Entity("LocationApi.Domain.AggregateModels.RouteAggregate.Segment", b =>
                {
                    b.OwnsOne("LocationApi.Domain.AggregateModels.LocationAggregate.LocationDescription", "From", b1 =>
                        {
                            b1.Property<long>("SegmentId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FromCity");

                            b1.Property<long>("LocationId")
                                .HasColumnType("bigint")
                                .HasColumnName("FromLocationId");

                            b1.Property<string>("LocationName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FromLocationName");

                            b1.HasKey("SegmentId");

                            b1.ToTable("Segment");

                            b1.WithOwner()
                                .HasForeignKey("SegmentId");
                        });

                    b.OwnsOne("LocationApi.Domain.AggregateModels.LocationAggregate.LocationDescription", "To", b1 =>
                        {
                            b1.Property<long>("SegmentId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ToCity");

                            b1.Property<long>("LocationId")
                                .HasColumnType("bigint")
                                .HasColumnName("ToLocationId");

                            b1.Property<string>("LocationName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ToLocationName");

                            b1.HasKey("SegmentId");

                            b1.ToTable("Segment");

                            b1.WithOwner()
                                .HasForeignKey("SegmentId");
                        });

                    b.Navigation("From")
                        .IsRequired();

                    b.Navigation("To")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
